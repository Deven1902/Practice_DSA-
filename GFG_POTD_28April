// GFG POTD
// 28 April. 
//Geek's Village and Wells 

/* Problem and its description:- 

Geek's village is represented by a 2-D matrix of characters of size n*m, where

H - Represents a house
W - Represents a well
. - Represents an open ground
N - Prohibited area(Not allowed to enter this area)

Every house in the village needs to take the water from the well, as the family members are so busy with their work, 
so every family wants to take the water from the well in minimum time, which is possible only if they have to cover as less distance as possible. 
Your task is to determine the minimum distance that a person in the house should travel to take out the water and carry it back to the house.

A person is allowed to move only in four directions left, right, up, and down. 
That means if he/she is the cell (i,j), then the possible cells he/she can reach in one move are (i,j-1),(i,j+1),(i-1,j),(i+1,j), 
and the person is not allowed to move out of the grid.

Note: For all the cells containing 'N', 'W' and '.' our answer should be 0, and for all the houses where there is no possibility 
of taking water our answer should be -1.
*/ 

// the solution is:- 

class Solution{
public:

    int dx[4] = {-1,1,0,0};
    int dy[4] = {0,0,-1,1};
    vector<vector<int>> chefAndWells(int n,int m,vector<vector<char>> &c){
        // Code here
        
        vector<vector<int>> distance(n, vector<int>(m, -1));
        vector<vector<bool>> visited(n, vector<bool>(m, false)); 
        
        queue<pair  <int, int>> q;
        // loop to push elements into q. 
        
        for(int i=0; i<n; i++) {
            for(int j=0; j<m; j++) {
                // pushing all the wells and setting them true first 
                if(c[i][j] == 'W') {
                    q.push({i, j});
                    visited[i][j] = true;
                }
                
                // setting the distance of W, N & . as '0' 
                if(c[i][j] == 'W' || c[i][j] == 'N' || c[i][j] == '.') {
                    distance[i][j]=0;
                }
            }
        }
        
        // variable that will have distance from house to well and back. it has 2 rounds hence initialized to 2 directly. 
        
        int dist = 2; 
        while(!q.empty()) {
            int qsize = q.size(); 
            
            while(qsize--) {
                auto it = q.front(); 
                q.pop(); 
                
                int i = it.first, j= it.second;
                
                for(int k=0; k<4; k++) {
                    int curri = i + dx[k], currj = j + dy[k];
                    
                    if (curri >= 0 && currj >= 0 && curri < n && currj < m && !visited[curri][currj] && c[curri][currj] != 'N') {
                        visited[curri][currj] = true;
                        q.push({curri, currj});
                        if (c[curri][currj] == 'H') {
                            distance[curri][currj] = dist;
                        }
                    }
                }
            }
            dist += 2;
        }
        
        return distance;
    }
};
